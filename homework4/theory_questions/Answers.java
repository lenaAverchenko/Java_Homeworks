package de.telran.averchenko.elena.homework4.theory_questions;

public class Answers {
    // 1. Объект хранится в куче (The Heap), ссылка на него при создании экземпляра класса - в стеке (The Stack)
    // 2. Объект из кучи будет удален, когда к Java, анализируя количество обращений к к нему, понимает, что его больше
    //    не использует программа. Это - задача принадлежит Garbage Collector.
    // 3. Метод из стека будет удален после окончания своей работы. Если в методе есть вложенные методы, то в стек
    //    они попадут поочередно в ходе выполнения программы, а выполнение их будет в обратном порядке: тот метод,
    //    который последним попал в стек, будет выполнен в первую очередь (основной метод при этом будет внизу стека
    //    до конца выполнения всех вложенных, и уйдет относительно них, из стека последним).
    // 4. Примитивные переменные метода хранятся в стеке вместе с методом. Срок их "жизни" ограничен сроком "жизни"
    //    метода (ввиду ограничения области видимости).
    //    Примитивные переменные объекта хранятся в куче. Область их видимости не ограничена каким-то конкретным методом.
    // 5. Куча имеет больший объем памяти, и в ней хранятся данные в произвольных местах.
    //    Стек по объему памяти меньше. И в нем все достаточно структурированно, и он менее загружен,
    //    поэтому тратит меньше времени на обратоку и поиск данных. Стек работает быстрее кучи.
    // 6. Метод находится в стеке. Ссылочный тип передается посредством ссылки (и изменения через
    //    отработку метода могут привести к изменению данных, расположенных по ссылке).
    //    Примитив в метод передается по значению. Т.е.,создается копия данных по значению, метод с ними работает,
    //    а после завершения своей работы, все изменения этого примитива удаляются из стека вместе с самм методом.
    //    и оригинальное значение переменной остается тем же.
    // 7. autoboxing - преобразование примитивного метода в ссылочный (int -> Integer, byte -> Byte, boolean -> Boolean)
    //    unboxing - преобразование ссылочного типа в примитивный (Integer -> int, Byte -> byte, Boolean -> boolean).
    // 8. Через "==" сравниваются значения. Если применить их к ссылочному типу данных, то будут сравниваться их ссылки.
    //    2 переменные будут ссылаться на 1 и тот же объект, например, на идентичную строку, ссылки будут разные, и
    //    результат - ложный. Так, те же строки стоит сравнить через метод equals(), который сравнит значения.
}
