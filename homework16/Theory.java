package de.telran.averchenko.elena.homework16;

public class Theory {

    /*
    * 1. Generics - универсальная сущность, которая помогает уйти от строгого определения типа. Благодаря дженерикам
    * удалось уйти от старой формы определения, например, коллекций, и теперь не нужно кастование при работе с их элеиментами.
    * Кроме того, теперь уже на этапе компиляции нельзя допус тить ошибку при добавлении неверного типа элемента в коллекциюю
    *
    * 2. Generic class - обобщенный класс. Мы можем написать только одну реализацию,
    * в то время как при определении объекта этого класса, можем работать с разными типами параметров этого класса. Т.е.
    * это обощенная реализация.
    *
    * 3. +:
    *  1) возможность писать код только один раз, и потом использовать его для разных типов параметров
    *  2) обеспечивают безопасность - для добавляемых типов. Если мы пытаемся добавить что-то не то, на момент компиляции
    * (еще до запуска), мы уже знаем, что что-то не так.
    *
    *    -:
    *  1) если до конца не разбираемся в том, что и как работает, есть большая вероятность допустить ошибки, и написать код
    * неверно.
    *  2) не всегда понятно, как прочитать написанное. Не всегда простое чтение кода дает полную картину о написанном.
    * Часто можно неверно интерпретировать, и некорректно воспринимать, что делает та или иная часть кода.
    *
    * 4. diamond operator - это часть "<>" с правой стороны, которая позволяет не указваать тип передаваемых данных повторно.
    *         List<String> numbers1 = new ArrayList<>();
    * т.к. этот же тип уже указан слева.
    *
    * 5. wildcards - это "навешивание" какого-то ограничения. Я бы интерпретировала "?" как - любой.
    * Пример Integer, Long, ... -это наследники Number
    * List<Integer>,List<Long> ... - это уже не является наследниками List<Number>
    *    а) <? extends Number> - (ограничение сверху) это значит, что в реализации можно принять любые дочерние для Number данные элементы,
    * т.е. можно принять коллекцию объектов класса Number или любого его наследника
    *    б) <? super Long> - (ограничение снизу) - если нам нужно навесить ограничения на то, чтобы коллекция не могла
    * работать с какими-то данными. Т.е. в данном случае мы указали, что принимать наша коллекция может Long, и все, что выше,
    * а это будет Number, Object. Но вот Integer и другие "братья" она уже не примет
    *    в) <?> - безограничений
    * Мне было проще понять именно так)
    *
    *
    *
    *  */
}
