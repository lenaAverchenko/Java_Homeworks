package de.telran.averchenko.elena.homework23;

public class Theory {
    /*
    * 1. InputStream - абстрактный класс, который описывает входной поток байт (1 и 0).
    *    OutputStream - абстрактный класс, который описывает выходной поток байт (1 и 0).
    *
    * 2. Reader/Writer - также применимы для работы с входным и выходным потоком, только в этом случае
    *    он работает с символьными данными, уже не с 0 и 1.
    *
    *    InputStream лучше применять, если мы работаем не только с текстом. Это могут быть изображения, видео, аудио.
    *    Reader лучше использовать для работы с текстовыми потоками данных.
    *
    * 3. ObjectOutputStream - с его помощью можно записать объект, который можно расщепить на 0 и 1. Для этого он должен
    *    реализовывать интерфейс Serializable, т.е. может біть сериализован - преобразован в последовательность байтов.
    *
    * 4. BufferedInputStream/BufferedOutputStream дает возможность работать с потоками быстрее и эффективнее. Это значит,
    *    что при работе с каждым байтом информации из, например, входного потока, не обязательно его сразу передавать дольше, и
    *    с каждым проходиться по всему пути. Сначала из потока собирается информация в 32-байтный буфер (либо другой - заданной
    *    величины), а дальше уже вытягивается информация из буфера.
    *
    * 5. close() - нужен для того, чтобы закрывать поток. Как только мы его применим, поток будет закрыть, и не будет возможна
    *    утечка памяти. Будет высвобождена память и системные ресурсы, связанные с этим потоком. Если поток не будет закрыт,
    *    будет выделен объем оперативной памяти для работы с этим стримом.
    *
    * 6.  try-with-resource позволяет работать с потоками, но не требует их закрытия, потому как оно осуществляется автоматически,
    *     если объект будет реализовывать интерфейс Closeable.
    *
    * 7. mark - маркирует какую-то позицию стрима
    *    reset - возвращается к последнему маркированному элементу.
    *    Используется не везде, а только со стримами, которые markSupported() - если этот метод вернет true, то имеется
    *    возможность ставить метки, и возвращаться к ним. Так, например, работая с файлом возможно ставить метки, а вот
    *    с сайтом в Интернете - нет.
    *
    * 8. InputStream в Reader может быть преобразован при помощи класса InputStreamReader. При создании его экземпляра
    *    достаточно передать в качестве параметра - InputStream.
    *
    *
    *
    * */

}
