package de.telran.averchenko.elena.homework20;

public class Theory {

    /*
    * 1. flatMap() - метод стрима, который может сделать из многомерного представления объекта линейныу результат.
    *    Его суть состоит в том, что принимая функцию, каждый из объектов входного стрима будет преобразовываться не
    *    в 1 объект (как это происходит с map()), а в отдельный стрим, а потом они все соединяются, и на выходе мы имеем
    *    1 линейный стрим.
    *
    * 2. Collectors - это, своего рода, "собиратель" потока в какую-то коллекцию. Собирательный метод стрима collect()
    *    может быть 2х видов:
    *    1) содержать в себе коллектор, предопределенный в Java:
    *       toList(), toSet(), toCollection(), toMap() - вернет список, множество, абстрактную коллекцию, мапу.
    *       collectingAndThen() - собрать коллекцию и произвести действие
    *       groupingBy() - сгруппирует элементы по дефолту в HashMap
    *       toUnmodifiableList() - в неизменяемый список
    *    2) метод может содержать 3 параметра:
    *       supplier - создает объект
    *       accumulator - добавляет элемент в коллекцию
    *       combiner - объединяет объекты
    *
    * 3. IntStream - это последовательность из интов. Его особенность - в дополнительных методах, которые могут найти максимальное значение,
    *    среднее, сумму, ...
    *    При этом, его нельзя собрать в коллекцию просто так, но если привести его в стрим методом boxed(), то можно работать
    *    как с любым стримом.
    *    Применяют их для ведения статистики, сбора определенных данных.
    *
    * 4. IntStream имеет свои методы, включая:
    *    range(int startPoint, int endPoint) -  в диапазоне от начального(включительно) до конечного (не включая) будет создана последовательность
    *    rangeClosed(int startPoint, int endPoint) - в диапазоне от начального до конечного (включительно) будет создана последовательность
    *
    * 5. Collector требует реализации следующих методов:
    *    supplier() - создает место, куда будем складывать
    *    accumulator() - добавляет новое значение - Объект в аккумулятор
    *    combiner() - комбинирует (объединяет) 2 листа в один (для многопоточной среды)
    *    finisher() - возврат результата
    *
    *
    *
    *
    * */
}
