package de.telran.averchenko.elena.homework14;

public class Theory {
    // 1. Граф - это нелинейная структура данных (не имеет стандартной реализации в Java), которая имеет вершины и ребра,
    //    эти вершины соединяющие.

    // 2. Смежный ребра - это ребра, которые "объединены" одной вершиной. Т.е. все ребра, которые будут исходить из
    //    одной вершины.

    // 3. Дерево - частный случай графа, у которого есть свои ограничения:
    //    - оно ациклично (внутри не может быть зацикленного перехода между вершинами)
    //    - оно связанное (т.е. все вершины связаны друг с другом по какому-то пути, нет отдельно стоящих вершин,
    //      а через корневой узел можно связаться с любой из вершин любой ветки.)

    // 4. Взвешенный направленный граф. Направленный говорит от том, что из одной вершины можно добраться в другую, но
    //    из второй обратно в первую не попадешь. Т.е. между 2 вершинами существует путь только в одну сторону. Взвешенность -
    //    означает, что каждое ребро имеет свой вес. Это какое-то значение, которое может, например, определить его длину.
    //    По итогу, взвешенный направленный граф - тот граф, у которого проход между вершинами может быть только в одну сторону,
    //    и каждому ребру отвечает при этом свое значение.

    // 5. DFS - он же алгоритм прохода графа в глубину можно применить для нахождения цикла. Поскольку при его применении есть
    //    "пометка" цветом уже пройденных вершин, и если в какой-то момент, попав в следующую вершину, она уже окажется помеченной,
    //    это будет означать, что цикл найден.
    //    Можно также понять, можно ли добраться из одного пункта в другой (в принципе, любым обходом), а с учетом веса ребер, можно найти найкротчайший
    //    путь между вершинами.

    //    В целом, графы применяются для карт, соц.сетей, переписок в месенджерах, перехоов между состояниями со сложными условиями.

    // 6. Топологическая сортировка - это такая сортировка, в которой мы можем упорядочить граф, приведя его к линейному порядку,
    //    а ребра будут соединять узлы всегда от наименьшего к большемиу (если нет циклов). т.е. ребро от элемента с меньшим номером
    //    может вести в сторнувершины с большим номером, но не в обратном порядке

    /**
     * 3.
      */
}
